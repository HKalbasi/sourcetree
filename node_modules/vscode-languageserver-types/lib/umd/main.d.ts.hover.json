{"hovers":{"x5856":{"content":5858,"references":8409},"x5860":{"content":5858,"definition":5856,"references":8409},"x5876":{"content":5878,"references":8412},"x5880":{"content":5878,"definition":5876,"references":8412},"x6356":{"content":6358,"references":8694},"x6368":{"content":6370,"references":8697},"x6578":{"content":6580,"references":8843},"x6592":{"content":6594,"references":8846},"x6703":{"content":6705,"references":8875},"x6721":{"content":6723,"references":8878},"x7180":{"content":7182,"references":9135},"x7194":{"content":7196,"references":9138},"x7379":{"content":7381,"references":9202}},"data":{"5856":"node_modules/vscode-languageserver-types/lib/umd/main.d.ts.html#1090","5858":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">interface</span> MarkupContent\nnamespace MarkupContent\n</code></pre>\n<hr>\n<p>A <code>MarkupContent</code> literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports <code>plaintext</code> and <code>markdown</code> as markup kinds.</p>\n<p>If the kind is <code>markdown</code> then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting</p>\n<p>Here is an example how such a string can be constructed using JavaScript / TypeScript:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">markdown</span>: <span class=\"hljs-title class_\">MarkdownContent</span> = {\n <span class=\"hljs-attr\">kind</span>: <span class=\"hljs-title class_\">MarkupKind</span>.<span class=\"hljs-property\">Markdown</span>,\n<span class=\"hljs-attr\">value</span>: [\n\t<span class=\"hljs-string\">&#x27;# Header&#x27;</span>,\n\t<span class=\"hljs-string\">&#x27;Some text&#x27;</span>,\n\t<span class=\"hljs-string\">&#x27;```typescript&#x27;</span>,\n\t<span class=\"hljs-string\">&#x27;someCode();&#x27;</span>,\n\t<span class=\"hljs-string\">&#x27;```&#x27;</span>\n].<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n};\n</code></pre>\n<p><em>Please Note</em> that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.</p>\n","5876":"node_modules/vscode-languageserver-types/lib/umd/main.d.ts.html#1416","5878":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">MarkedString</span> = <span class=\"hljs-built_in\">string</span> | {\n    <span class=\"hljs-attr\">language</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span>;\n}\n<span class=\"hljs-keyword\">namespace</span> MarkedString\n</code></pre>\n<hr>\n<p>MarkedString can be used to render human readable text. It is either a markdown string\nor a code-block that provides a language and a code snippet. The language identifier\nis semantically equal to the optional language identifier in fenced code blocks in GitHub\nissues. See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting</p>\n<p>The pair of a language and a value is an equivalent to markdown:</p>\n<pre><code class=\"language-${language}\">${value}\n</code></pre>\n<p>Note that markdown strings will be sanitized - that means html will be escaped.</p>\n","6358":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">Range</span>.<span class=\"hljs-property\">start</span>: <span class=\"hljs-title class_\">Position</span>\n</code></pre>\n<hr>\n<p>The range's start position</p>\n","6370":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">Position</span>.<span class=\"hljs-property\">line</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n<hr>\n<p>Line position in a document (zero-based).</p>\n","6580":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">language</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","6594":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","6705":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">MarkupContent</span>.<span class=\"hljs-property\">kind</span>: <span class=\"hljs-title class_\">MarkupKind</span>\n</code></pre>\n<hr>\n<p>The type of the Markup</p>\n","6723":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">MarkupContent</span>.<span class=\"hljs-property\">value</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n<hr>\n<p>The content itself</p>\n","7182":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">Position</span>.<span class=\"hljs-property\">character</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n<hr>\n<p>Character offset on a line in a document (zero-based). Assuming that the line is\nrepresented as a string, the <code>character</code> value represents the gap between the\n<code>character</code> and <code>character + 1</code>.</p>\n<p>If the character value is greater than the line length it defaults back to the\nline length.</p>\n","7196":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">Range</span>.<span class=\"hljs-property\">end</span>: <span class=\"hljs-title class_\">Position</span>\n</code></pre>\n<hr>\n<p>The range's end position.</p>\n","7381":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">Hover</span>.<span class=\"hljs-property\">contents</span>: <span class=\"hljs-title class_\">MarkedString</span> | <span class=\"hljs-title class_\">MarkupContent</span> | <span class=\"hljs-title class_\">MarkedString</span>[]\n</code></pre>\n<hr>\n<p>The hover's content</p>\n"}}