{"hovers":{"x5678":{"content":5680,"references":8382},"x5682":{"content":5680,"definition":5678,"references":8382},"x5684":{"content":5680,"definition":5678,"references":8382},"x6644":{"content":6646,"references":8869}},"data":{"5678":"node_modules/@types/markdown-it/lib/index.d.ts.html#13","5680":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">namespace</span> MarkdownIt\n</code></pre>\n<hr>\n<p>Main parser/renderer class.</p>\n<h5>Usage</h5>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// node.js, &quot;classic&quot; way:</span>\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">MarkdownIt</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>),\n    md = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MarkdownIt</span>();\n<span class=\"hljs-keyword\">var</span> result = md.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;# markdown-it rulezz!&#x27;</span>);\n\n<span class=\"hljs-comment\">// node.js, the same, but with sugar:</span>\n<span class=\"hljs-keyword\">var</span> md = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>)();\n<span class=\"hljs-keyword\">var</span> result = md.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;# markdown-it rulezz!&#x27;</span>);\n\n<span class=\"hljs-comment\">// browser without AMD, added to &quot;window&quot; on script load</span>\n<span class=\"hljs-comment\">// Note, there are no dash.</span>\n<span class=\"hljs-keyword\">var</span> md = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">markdownit</span>();\n<span class=\"hljs-keyword\">var</span> result = md.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;# markdown-it rulezz!&#x27;</span>);\n</code></pre>\n<p>Single line rendering, without paragraph wrap:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> md = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>)();\n<span class=\"hljs-keyword\">var</span> result = md.<span class=\"hljs-title function_\">renderInline</span>(<span class=\"hljs-string\">&#x27;__markdown-it__ rulezz!&#x27;</span>);\n</code></pre>\n<h5>Example</h5>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// commonmark mode</span>\n<span class=\"hljs-keyword\">var</span> md = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>)(<span class=\"hljs-string\">&#x27;commonmark&#x27;</span>);\n\n<span class=\"hljs-comment\">// default mode</span>\n<span class=\"hljs-keyword\">var</span> md = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>)();\n\n<span class=\"hljs-comment\">// enable everything</span>\n<span class=\"hljs-keyword\">var</span> md = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>)({\n  <span class=\"hljs-attr\">html</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">linkify</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">typographer</span>: <span class=\"hljs-literal\">true</span>\n});\n</code></pre>\n<h5>Syntax highlighting</h5>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> hljs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;highlight.js&#x27;</span>) <span class=\"hljs-comment\">// https://highlightjs.org/</span>\n\n<span class=\"hljs-keyword\">var</span> md = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>)({\n  <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, lang</span>) {\n    <span class=\"hljs-keyword\">if</span> (lang &amp;&amp; hljs.<span class=\"hljs-title function_\">getLanguage</span>(lang)) {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">return</span> hljs.<span class=\"hljs-title function_\">highlight</span>(lang, str, <span class=\"hljs-literal\">true</span>).<span class=\"hljs-property\">value</span>;\n      } <span class=\"hljs-keyword\">catch</span> (__) {}\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span>; <span class=\"hljs-comment\">// use external default escaping</span>\n  }\n});\n</code></pre>\n<p>Or with full wrapper override (if you need assign class to <code>&lt;pre&gt;</code>):</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> hljs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;highlight.js&#x27;</span>) <span class=\"hljs-comment\">// https://highlightjs.org/</span>\n\n<span class=\"hljs-comment\">// Actual default values</span>\n<span class=\"hljs-keyword\">var</span> md = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>)({\n  <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, lang</span>) {\n    <span class=\"hljs-keyword\">if</span> (lang &amp;&amp; hljs.<span class=\"hljs-title function_\">getLanguage</span>(lang)) {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&#x27;</span> +\n               hljs.<span class=\"hljs-title function_\">highlight</span>(lang, str, <span class=\"hljs-literal\">true</span>).<span class=\"hljs-property\">value</span> +\n               <span class=\"hljs-string\">&#x27;&lt;/code&gt;&lt;/pre&gt;&#x27;</span>;\n      } <span class=\"hljs-keyword\">catch</span> (__) {}\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&#x27;</span> + md.<span class=\"hljs-property\">utils</span>.escapeHtml(str) + <span class=\"hljs-string\">&#x27;&lt;/code&gt;&lt;/pre&gt;&#x27;</span>;\n  }\n});\n</code></pre>\n","6646":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">MarkdownIt</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-attr\">src</span>: <span class=\"hljs-built_in\">string</span>, env?: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">string</span>\n</code></pre>\n<hr>\n<p>Render markdown string into html. It does all magic for you :).</p>\n<p><code>env</code> can be used to inject additional metadata (<code>{}</code> by default).\nBut you will not need it with high probability. See also comment\nin [[MarkdownIt.parse]].</p>\n"}}