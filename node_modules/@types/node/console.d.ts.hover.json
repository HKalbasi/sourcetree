{"hovers":{"x297":{"content":293,"definition":295,"references":459},"x299":{"content":293,"definition":295,"references":459},"x310":{"content":308,"references":462}},"data":{"293":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">namespace</span> console\nvar console: Console\n</code></pre>\n<hr>\n<p>The <code>console</code> module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.</p>\n<p>The module exports two specific components:</p>\n<ul>\n<li>A <code>Console</code> class with methods such as <code>console.log()</code>, <code>console.error()</code> and<code>console.warn()</code> that can be used to write to any Node.js stream.</li>\n<li>A global <code>console</code> instance configured to write to <code>process.stdout</code> and <code>process.stderr</code>. The global <code>console</code> can be used without calling<code>require('console')</code>.</li>\n</ul>\n<p><em><strong>Warning</strong></em>: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the <code>note on process I/O</code> for\nmore information.</p>\n<p>Example using the global <code>console</code>:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);\n<span class=\"hljs-comment\">// Prints: hello world, to stdout</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello %s&#x27;</span>, <span class=\"hljs-string\">&#x27;world&#x27;</span>);\n<span class=\"hljs-comment\">// Prints: hello world, to stdout</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Whoops, something bad happened&#x27;</span>));\n<span class=\"hljs-comment\">// Prints error message and stack trace to stderr:</span>\n<span class=\"hljs-comment\">//   Error: Whoops, something bad happened</span>\n<span class=\"hljs-comment\">//     at [eval]:5:15</span>\n<span class=\"hljs-comment\">//     at Script.runInThisContext (node:vm:132:18)</span>\n<span class=\"hljs-comment\">//     at Object.runInThisContext (node:vm:309:38)</span>\n<span class=\"hljs-comment\">//     at node:internal/process/execution:77:19</span>\n<span class=\"hljs-comment\">//     at [eval]-wrapper:6:22</span>\n<span class=\"hljs-comment\">//     at evalScript (node:internal/process/execution:76:60)</span>\n<span class=\"hljs-comment\">//     at node:internal/main/eval_string:23:3</span>\n\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;Will Robinson&#x27;</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">`Danger <span class=\"hljs-subst\">${name}</span>! Danger!`</span>);\n<span class=\"hljs-comment\">// Prints: Danger Will Robinson! Danger!, to stderr</span>\n</code></pre>\n<p>Example using the <code>Console</code> class:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> out = <span class=\"hljs-title function_\">getStreamSomehow</span>();\n<span class=\"hljs-keyword\">const</span> err = <span class=\"hljs-title function_\">getStreamSomehow</span>();\n<span class=\"hljs-keyword\">const</span> myConsole = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title class_\">Console</span>(out, err);\n\nmyConsole.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);\n<span class=\"hljs-comment\">// Prints: hello world, to out</span>\nmyConsole.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello %s&#x27;</span>, <span class=\"hljs-string\">&#x27;world&#x27;</span>);\n<span class=\"hljs-comment\">// Prints: hello world, to out</span>\nmyConsole.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Whoops, something bad happened&#x27;</span>));\n<span class=\"hljs-comment\">// Prints: [Error: Whoops, something bad happened], to err</span>\n\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;Will Robinson&#x27;</span>;\nmyConsole.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">`Danger <span class=\"hljs-subst\">${name}</span>! Danger!`</span>);\n<span class=\"hljs-comment\">// Prints: Danger Will Robinson! Danger!, to err</span>\n</code></pre>\n","295":"node_modules/@types/node/globals.d.ts.html#28","308":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Console</span>.<span class=\"hljs-title function_\">log</span>(...<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>[]): <span class=\"hljs-built_in\">void</span> (+<span class=\"hljs-number\">1</span> overload)\n</code></pre>\n"}}