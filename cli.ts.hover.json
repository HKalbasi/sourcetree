{"hovers":{"x9710":{"content":9712,"definition":9702,"references":9963},"x9714":{"definition":9694,"references":9966},"x9720":{"content":9722,"definition":251,"references":439},"x9724":{"definition":183,"references":393},"x9730":{"content":9732,"definition":51,"references":140},"x9734":{"definition":13,"references":124},"x9740":{"content":9742,"definition":6743,"references":8885},"x9744":{"definition":5483,"references":8348},"x9746":{"content":9712,"definition":9702,"references":9963},"x9762":{"content":9756,"definition":9754,"references":9975},"x9764":{"content":9756,"definition":9754,"references":9975},"x9766":{"content":9756,"definition":9754,"references":9975},"x9768":{"content":9756,"definition":9754,"references":9975},"x9770":{"content":9756,"definition":9754,"references":9975},"x9772":{"content":9756,"definition":9754,"references":9975},"x9780":{"content":9782,"references":9981},"x9790":{"content":9792,"references":9988},"x9800":{"content":9802,"references":9994},"x9810":{"content":9812,"references":10000},"x9820":{"content":9822,"references":10006},"x9830":{"content":9832,"references":10012},"x9840":{"content":9842,"references":10019},"x9850":{"references":10023},"x9855":{"content":9857,"references":10029},"x9862":{"references":10033},"x9867":{"content":9869,"references":10039},"x9871":{"content":9722,"definition":251,"references":439},"x9873":{"content":9712,"definition":9702,"references":9963},"x9885":{"content":9883,"definition":9881,"references":10043},"x9898":{"content":9894,"definition":9892,"references":10046},"x9910":{"content":9908,"definition":9906,"references":10049},"x9915":{"content":9917,"references":10055},"x9919":{"content":9782,"definition":9780,"references":9981},"x9921":{"content":9712,"definition":9702,"references":9963},"x9933":{"content":9931,"definition":9929,"references":10059},"x9935":{"content":9917,"definition":9915,"references":10055},"x9937":{"content":9832,"definition":9830,"references":10012},"x9939":{"content":9732,"definition":51,"references":140},"x9941":{"content":9917,"definition":9915,"references":10055},"x9943":{"content":9842,"definition":9840,"references":10019},"x9945":{"content":9732,"definition":51,"references":140},"x9947":{"content":9742,"definition":6743,"references":8885},"x9949":{"content":9917,"definition":9915,"references":10055},"x9951":{"content":9869,"definition":9867,"references":10039},"x9953":{"content":207,"definition":205,"references":408},"x9955":{"content":9857,"definition":9855,"references":10029}},"data":{"13":"debug/flags.ts.html#1","51":"debug/flags.ts.html#3","183":"debug/bench.ts.html#1","205":"debug/bench.ts.html#4","207":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">end</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>\n</code></pre>\n","251":"debug/bench.ts.html#9","5483":"index.ts.html#1","6743":"index.ts.html#103","9694":"node_modules/commander/typings/index.d.ts.html#1","9702":"node_modules/commander/typings/index.d.ts.html#758","9712":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">program</span>: <span class=\"hljs-title class_\">Command</span>\n<span class=\"hljs-keyword\">import</span> program\n</code></pre>\n","9722":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">start</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">text: <span class=\"hljs-built_in\">string</span>, force?: <span class=\"hljs-built_in\">boolean</span></span>) =&gt;</span> <span class=\"hljs-title class_\">Bench</span>\n<span class=\"hljs-keyword\">import</span> start\n</code></pre>\n","9732":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">enableFlag</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">flag: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>\n<span class=\"hljs-keyword\">import</span> enableFlag\n</code></pre>\n","9742":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">main</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ input, output, dist, uriMap }: MainOptions</span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt;\n<span class=\"hljs-keyword\">import</span> main\n</code></pre>\n","9754":"node_modules/commander/typings/index.d.ts.html#477","9756":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Command</span>.<span class=\"hljs-title function_\">option</span>(<span class=\"hljs-attr\">flags</span>: <span class=\"hljs-built_in\">string</span>, description?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>, defaultValue?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">boolean</span> | <span class=\"hljs-literal\">undefined</span>): <span class=\"hljs-variable language_\">this</span> (+<span class=\"hljs-number\">2</span> overloads)\n</code></pre>\n<hr>\n<p>Define option with <code>flags</code>, <code>description</code> and optional\ncoercion <code>fn</code>.</p>\n<p>The <code>flags</code> string contains the short and/or long flags,\nseparated by comma, a pipe or space. The following are all valid\nall will output this way when <code>--help</code> is used.</p>\n<pre><code>&quot;-p, --pepper&quot;\n&quot;-p|--pepper&quot;\n&quot;-p --pepper&quot;\n</code></pre>\n","9780":"cli.ts.html#15","9782":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">CliOptions</span> = {\n    <span class=\"hljs-attr\">input</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">output</span>: <span class=\"hljs-built_in\">string</span>;\n    dist?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>;\n    uriMap?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>;\n    <span class=\"hljs-attr\">bench</span>: <span class=\"hljs-built_in\">boolean</span>;\n    <span class=\"hljs-attr\">check</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n</code></pre>\n","9792":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">input</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","9802":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">output</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","9812":"<pre><code class=\"language-typescript\">(property) dist?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>\n</code></pre>\n","9822":"<pre><code class=\"language-typescript\">(property) uriMap?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>\n</code></pre>\n","9830":"cli.ts.html#20","9832":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">bench</span>: <span class=\"hljs-built_in\">boolean</span>\n</code></pre>\n","9840":"cli.ts.html#21","9842":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">check</span>: <span class=\"hljs-built_in\">boolean</span>\n</code></pre>\n","9855":"cli.ts.html#24","9857":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">cli</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt;\n</code></pre>\n","9867":"cli.ts.html#25","9869":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">bench</span>: <span class=\"hljs-title class_\">Bench</span>\n</code></pre>\n","9881":"node_modules/commander/typings/index.d.ts.html#593","9883":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Command</span>.<span class=\"hljs-title function_\">parse</span>(argv?: <span class=\"hljs-built_in\">string</span>[] | <span class=\"hljs-literal\">undefined</span>, options?: <span class=\"hljs-title class_\">ParseOptions</span> | <span class=\"hljs-literal\">undefined</span>): <span class=\"hljs-variable language_\">this</span>\n</code></pre>\n<hr>\n<p>Parse <code>argv</code>, setting options and invoking commands when defined.</p>\n<p>The default expectation is that the arguments are from node and have the application as argv[0]\nand the script being run in argv[1], with user parameters after that.</p>\n","9892":"node_modules/@types/node/globals.d.ts.html#27","9894":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">process</span>: <span class=\"hljs-title class_\">Node</span>JS.<span class=\"hljs-property\">Process</span>\n</code></pre>\n","9906":"node_modules/@types/node/process.d.ts.html#320","9908":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">Node</span>JS.<span class=\"hljs-property\">Process</span>.<span class=\"hljs-property\">argv</span>: <span class=\"hljs-built_in\">string</span>[]\n</code></pre>\n<hr>\n<p>The <code>process.argv</code> property returns an array containing the command-line\narguments passed when the Node.js process was launched. The first element will\nbe {@link execPath}. See <code>process.argv0</code> if access to the original value\nof <code>argv[0]</code> is needed. The second element will be the path to the JavaScript\nfile being executed. The remaining elements will be any additional command-line\narguments.</p>\n<p>For example, assuming the following script for <code>process-args.js</code>:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> { argv } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;process&#x27;</span>;\n\n<span class=\"hljs-comment\">// print process.argv</span>\nargv.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val, index</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${index}</span>: <span class=\"hljs-subst\">${val}</span>`</span>);\n});\n</code></pre>\n<p>Launching the Node.js process as:</p>\n<pre><code class=\"language-console\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">node process-args.js one two=three four</span>\n</code></pre>\n<p>Would generate the output:</p>\n<pre><code class=\"language-text\">0: /usr/local/bin/node\n1: /Users/mjr/work/node/process-args.js\n2: one\n3: two=three\n4: four\n</code></pre>\n","9915":"cli.ts.html#27","9917":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">options</span>: <span class=\"hljs-title class_\">CliOptions</span>\n</code></pre>\n","9929":"node_modules/commander/typings/index.d.ts.html#629","9931":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Command</span>.<span class=\"hljs-property\">opts</span>&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">OptionValues</span>&gt;(): T\n</code></pre>\n<hr>\n<p>Return an object containing options as key-value pairs</p>\n"}}