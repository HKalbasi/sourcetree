{"hovers":{"x524":{"content":526,"definition":516,"references":1060},"x538":{"content":536,"definition":534,"references":1063},"x560":{"content":562,"definition":548,"references":1066},"x578":{"content":580,"definition":570,"references":1069},"x592":{"content":590,"definition":588,"references":1072},"x600":{"content":602,"references":1078},"x607":{"content":609,"references":1084},"x614":{"content":616,"references":1091},"x621":{"references":1095},"x626":{"content":628,"references":1101},"x630":{"content":526,"definition":516,"references":1060},"x632":{"content":609,"definition":607,"references":1084},"x634":{"content":562,"definition":548,"references":1066},"x636":{"content":628,"definition":626,"references":1101},"x641":{"content":643,"references":1108},"x648":{"references":1111},"x650":{"content":580,"definition":570,"references":1069},"x652":{"content":609,"definition":607,"references":1084},"x654":{"content":616,"definition":614,"references":1091},"x662":{"content":664,"references":1117},"x672":{"content":674,"references":1124},"x679":{"content":681,"references":1131},"x686":{"content":688,"references":1138},"x693":{"references":1142},"x701":{"content":703,"references":1148},"x711":{"references":1152},"x719":{"content":721,"references":1158},"x726":{"content":728,"references":1164},"x733":{"content":735,"references":1171},"x737":{"content":664,"definition":662,"references":1117},"x742":{"references":1175},"x747":{"content":749,"references":1181},"x754":{"content":756,"references":1188},"x761":{"content":763,"references":1195},"x768":{"references":1199},"x770":{"content":756,"definition":754,"references":1188},"x772":{"content":763,"definition":761,"references":1195},"x777":{"content":779,"references":1205},"x781":{"content":33,"definition":31,"references":134},"x786":{"content":788,"references":1213},"x793":{"content":795,"references":1220},"x800":{"content":802,"references":1227},"x807":{"references":1231},"x812":{"content":814,"references":1237},"x816":{"content":779,"definition":777,"references":1205},"x818":{"content":115,"definition":113,"references":172},"x820":{"content":749,"definition":747,"references":1181},"x822":{"content":795,"definition":793,"references":1220},"x824":{"content":802,"definition":800,"references":1227},"x826":{"content":814,"definition":812,"references":1237},"x828":{"content":814,"definition":812,"references":1237},"x830":{"content":735,"definition":733,"references":1171},"x842":{"content":840,"definition":838,"references":1242},"x847":{"content":849,"references":1248},"x854":{"references":1252},"x859":{"content":861,"references":1258},"x863":{"content":849,"definition":847,"references":1248},"x865":{"content":674,"definition":672,"references":1124},"x870":{"content":872,"references":1265},"x874":{"content":749,"definition":747,"references":1181},"x876":{"content":861,"definition":859,"references":1258},"x878":{"content":681,"definition":679,"references":1131},"x880":{"content":861,"definition":859,"references":1258},"x882":{"content":688,"definition":686,"references":1138},"x887":{"content":889,"references":1272},"x891":{"content":779,"definition":777,"references":1205},"x893":{"content":115,"definition":113,"references":172},"x895":{"content":872,"definition":870,"references":1265},"x897":{"content":779,"definition":777,"references":1205},"x899":{"content":77,"definition":75,"references":153},"x901":{"content":872,"definition":870,"references":1265},"x903":{"content":889,"definition":887,"references":1272},"x905":{"content":889,"definition":887,"references":1272},"x907":{"content":849,"definition":847,"references":1248},"x909":{"content":703,"definition":701,"references":1148},"x914":{"content":916,"references":1280},"x921":{"content":923,"references":1287},"x928":{"content":930,"references":1294},"x935":{"content":937,"references":1301},"x939":{"content":728,"definition":726,"references":1164},"x944":{"content":946,"references":1308},"x948":{"content":946,"definition":944,"references":1308},"x950":{"content":937,"definition":935,"references":1301},"x962":{"content":960,"definition":958,"references":1312},"x964":{"content":937,"definition":935,"references":1301},"x966":{"content":946,"definition":944,"references":1308},"x968":{"content":937,"definition":935,"references":1301},"x970":{"content":946,"definition":944,"references":1308},"x972":{"content":916,"definition":914,"references":1280},"x974":{"content":937,"definition":935,"references":1301},"x976":{"content":946,"definition":944,"references":1308},"x978":{"content":946,"definition":944,"references":1308},"x980":{"content":916,"definition":914,"references":1280},"x982":{"content":937,"definition":935,"references":1301},"x984":{"content":946,"definition":944,"references":1308},"x986":{"content":946,"definition":944,"references":1308},"x988":{"content":916,"definition":914,"references":1280},"x990":{"content":788,"definition":786,"references":1213},"x992":{"content":923,"definition":921,"references":1287},"x994":{"content":930,"definition":928,"references":1294},"x996":{"content":930,"definition":928,"references":1294},"x998":{"content":946,"definition":944,"references":1308},"x1000":{"content":937,"definition":935,"references":1301},"x1002":{"content":960,"definition":958,"references":1312},"x1004":{"content":937,"definition":935,"references":1301},"x1006":{"content":946,"definition":944,"references":1308},"x1008":{"content":916,"definition":914,"references":1280},"x1010":{"content":937,"definition":935,"references":1301},"x1012":{"content":946,"definition":944,"references":1308},"x1014":{"content":946,"definition":944,"references":1308},"x1016":{"content":930,"definition":928,"references":1294},"x1018":{"content":923,"definition":921,"references":1287},"x1020":{"content":937,"definition":935,"references":1301},"x1022":{"content":946,"definition":944,"references":1308},"x1024":{"content":937,"definition":935,"references":1301},"x1026":{"content":946,"definition":944,"references":1308},"x1028":{"content":916,"definition":914,"references":1280},"x1030":{"content":937,"definition":935,"references":1301},"x1032":{"content":946,"definition":944,"references":1308},"x1034":{"content":946,"definition":944,"references":1308},"x1036":{"content":916,"definition":914,"references":1280},"x1038":{"content":937,"definition":935,"references":1301},"x1040":{"content":946,"definition":944,"references":1308},"x1042":{"content":946,"definition":944,"references":1308},"x1044":{"content":916,"definition":914,"references":1280},"x1046":{"content":788,"definition":786,"references":1213},"x1048":{"content":923,"definition":921,"references":1287},"x1050":{"content":930,"definition":928,"references":1294},"x1052":{"content":916,"definition":914,"references":1280}},"data":{"31":"node_modules/typescript-lsif/lib/lib.es2015.collection.d.ts.html#21","33":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">interface</span> Map&lt;K, V&gt;\n</code></pre>\n","75":"node_modules/typescript-lsif/lib/lib.es2015.collection.d.ts.html#27","77":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Map</span>&lt;K, V&gt;.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-attr\">key</span>: K, <span class=\"hljs-attr\">value</span>: V): <span class=\"hljs-variable language_\">this</span>\n</code></pre>\n","113":"node_modules/typescript-lsif/lib/lib.es2015.collection.d.ts.html#25","115":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Map</span>&lt;K, V&gt;.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-attr\">key</span>: K): V | <span class=\"hljs-literal\">undefined</span>\n</code></pre>\n","516":"node_modules/@types/node/path.d.ts.html#111","526":"<pre><code class=\"language-typescript\">(alias) (method) <span class=\"hljs-title function_\">dirname</span>(<span class=\"hljs-attr\">p</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">string</span>\n<span class=\"hljs-keyword\">import</span> dirname\n</code></pre>\n<hr>\n<p>Return the directory name of a path. Similar to the Unix dirname command.</p>\n","534":"node_modules/@types/node/path.d.ts.html#18","536":"<pre><code class=\"language-typescript\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">&quot;path&quot;</span>\n</code></pre>\n<hr>\n<p>The <code>path</code> module provides utilities for working with file and directory paths.\nIt can be accessed using:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\n</code></pre>\n","548":"node_modules/@types/node/fs/promises.d.ts.html#441","562":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mkdir</span>(<span class=\"hljs-params\">path: PathLike, options: MakeDirectoryOptions &amp; {\n    recursive: <span class=\"hljs-literal\">true</span>;\n}</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>&gt; (+<span class=\"hljs-number\">2</span> overloads)\n<span class=\"hljs-keyword\">import</span> mkdir\n</code></pre>\n<hr>\n<p>Asynchronously creates a directory.</p>\n<p>The optional <code>options</code> argument can be an integer specifying <code>mode</code> (permission\nand sticky bits), or an object with a <code>mode</code> property and a <code>recursive</code>property indicating whether parent directories should be created. Calling<code>fsPromises.mkdir()</code> when <code>path</code> is a directory\nthat exists results in a\nrejection only when <code>recursive</code> is false.</p>\n","570":"node_modules/@types/node/fs/promises.d.ts.html#788","580":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">writeFile</span>(<span class=\"hljs-params\">file: PathLike | FileHandle, data: <span class=\"hljs-built_in\">string</span> | NodeJS.ArrayBufferView | Iterable&lt;<span class=\"hljs-built_in\">string</span> | NodeJS.ArrayBufferView&gt; | AsyncIterable&lt;<span class=\"hljs-built_in\">string</span> | NodeJS.ArrayBufferView&gt; | Stream, options?: (ObjectEncodingOptions &amp; {\n    mode?: Mode | <span class=\"hljs-literal\">undefined</span>;\n    flag?: OpenMode | <span class=\"hljs-literal\">undefined</span>;\n} &amp; Abortable) | BufferEncoding | <span class=\"hljs-literal\">null</span> | <span class=\"hljs-literal\">undefined</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt;\n<span class=\"hljs-keyword\">import</span> writeFile\n</code></pre>\n<hr>\n<p>Asynchronously writes data to a file, replacing the file if it already exists.<code>data</code> can be a string, a <code>Buffer</code>, or, an object with an own (not inherited)<code>toString</code> function property.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>Any specified <code>FileHandle</code> has to support writing.</p>\n<p>It is unsafe to use <code>fsPromises.writeFile()</code> multiple times on the same file\nwithout waiting for the promise to be settled.</p>\n<p>Similarly to <code>fsPromises.readFile</code> - <code>fsPromises.writeFile</code> is a convenience\nmethod that performs multiple <code>write</code> calls internally to write the buffer\npassed to it. For performance sensitive code consider using <code>fs.createWriteStream()</code>.</p>\n<p>It is possible to use an <code>AbortSignal</code> to cancel an <code>fsPromises.writeFile()</code>.\nCancelation is &quot;best effort&quot;, and some amount of data is likely still\nto be written.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> { writeFile } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs/promises&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Buffer</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;buffer&#x27;</span>;\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">const</span> controller = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();\n  <span class=\"hljs-keyword\">const</span> { signal } = controller;\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Uint</span>8<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;Hello Node.js&#x27;</span>));\n  <span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-title function_\">writeFile</span>(<span class=\"hljs-string\">&#x27;message.txt&#x27;</span>, data, { signal });\n\n  <span class=\"hljs-comment\">// Abort the request before the promise settles.</span>\n  controller.<span class=\"hljs-title function_\">abort</span>();\n\n  <span class=\"hljs-keyword\">await</span> promise;\n} <span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-comment\">// When a request is aborted - err is an AbortError</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n}\n</code></pre>\n<p>Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering <code>fs.writeFile</code> performs.</p>\n","588":"node_modules/@types/node/fs/promises.d.ts.html#11","590":"<pre><code class=\"language-typescript\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">&quot;fs/promises&quot;</span>\n</code></pre>\n<hr>\n<p>The <code>fs/promises</code> API provides asynchronous file system methods that return\npromises.</p>\n<p>The promise APIs use the underlying Node.js threadpool to perform file\nsystem operations off the event loop thread. These operations are not\nsynchronized or threadsafe. Care must be taken when performing multiple\nconcurrent modifications on the same file or data corruption may occur.</p>\n","602":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">myWriteFile</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">path: <span class=\"hljs-built_in\">string</span>, content: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt;\n</code></pre>\n","607":"util.ts.html#4","609":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","614":"util.ts.html#4","616":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","626":"util.ts.html#5","628":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">folder</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","643":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">recursive</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<hr>\n<p>Indicates whether parent folders should be created.\nIf a folder was created, the path to the first created folder will be returned.</p>\n","662":"util.ts.html#10","664":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Addition</span> = {\n    <span class=\"hljs-attr\">position</span>: {\n        <span class=\"hljs-attr\">line</span>: <span class=\"hljs-built_in\">number</span>;\n        <span class=\"hljs-attr\">character</span>: <span class=\"hljs-built_in\">number</span>;\n    };\n    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n","672":"util.ts.html#11","674":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">position</span>: {\n    <span class=\"hljs-attr\">line</span>: <span class=\"hljs-built_in\">number</span>;\n    <span class=\"hljs-attr\">character</span>: <span class=\"hljs-built_in\">number</span>;\n}\n</code></pre>\n","679":"util.ts.html#12","681":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">line</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","686":"util.ts.html#13","688":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">character</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","701":"util.ts.html#15","703":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">text</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","721":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">putInSrc</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">highlight: <span class=\"hljs-built_in\">string</span>, additions: Addition[]</span>) =&gt;</span> <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","726":"util.ts.html#18","728":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","733":"util.ts.html#18","735":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">additions</span>: <span class=\"hljs-title class_\">Addition</span>[]\n</code></pre>\n","747":"util.ts.html#19","749":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">key</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">i: <span class=\"hljs-built_in\">number</span>, j: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","754":"util.ts.html#19","756":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">i</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","761":"util.ts.html#19","763":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">j</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","777":"util.ts.html#20","779":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">additionMap</span>: <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-built_in\">any</span>, <span class=\"hljs-built_in\">any</span>&gt;\n</code></pre>\n","786":"util.ts.html#21","788":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">addsInPlace</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">i: <span class=\"hljs-built_in\">number</span>, j: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">any</span>\n</code></pre>\n","793":"util.ts.html#21","795":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">i</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","800":"util.ts.html#21","802":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">j</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","812":"util.ts.html#22","814":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">any</span>\n</code></pre>\n","838":"node_modules/typescript-lsif/lib/lib.es5.d.ts.html#1355","840":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Array</span>&lt;T&gt;.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-attr\">callbackfn</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">value: T, index: <span class=\"hljs-built_in\">number</span>, array: T[]</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>, thisArg?: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span>\n</code></pre>\n<hr>\n<p>Performs the specified action for each element in an array.</p>\n","847":"util.ts.html#28","849":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">add</span>: <span class=\"hljs-title class_\">Addition</span>\n</code></pre>\n","859":"util.ts.html#29","861":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">p</span>: {\n    <span class=\"hljs-attr\">line</span>: <span class=\"hljs-built_in\">number</span>;\n    <span class=\"hljs-attr\">character</span>: <span class=\"hljs-built_in\">number</span>;\n}\n</code></pre>\n","870":"util.ts.html#30","872":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">k</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","887":"util.ts.html#31","889":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">cur</span>: <span class=\"hljs-built_in\">any</span>\n</code></pre>\n","914":"util.ts.html#35","916":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","921":"util.ts.html#36","923":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">i</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","928":"util.ts.html#37","930":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">j</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","935":"util.ts.html#38","937":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">hline</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","944":"util.ts.html#39","946":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">p</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","958":"node_modules/typescript-lsif/lib/lib.es5.d.ts.html#501","960":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-property\">length</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n<hr>\n<p>Returns the length of a String object.</p>\n"}}