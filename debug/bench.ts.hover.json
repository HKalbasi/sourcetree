{"hovers":{"x189":{"content":191,"definition":89,"references":159},"x193":{"definition":13,"references":124},"x198":{"content":200,"references":401},"x205":{"content":207,"references":408},"x212":{"references":411},"x217":{"references":414},"x222":{"content":224,"references":420},"x226":{"content":200,"definition":198,"references":401},"x231":{"content":233,"references":427},"x238":{"references":430},"x243":{"references":433},"x251":{"content":253,"references":439},"x258":{"content":260,"references":445},"x265":{"content":267,"references":452},"x269":{"content":200,"definition":198,"references":401},"x274":{"references":456},"x276":{"content":191,"definition":89,"references":159},"x278":{"content":267,"definition":265,"references":452},"x280":{"content":224,"definition":222,"references":420},"x301":{"content":293,"definition":295,"references":459},"x312":{"content":308,"definition":310,"references":462},"x314":{"content":260,"definition":258,"references":445},"x319":{"content":321,"references":468},"x338":{"content":330,"definition":328,"references":472},"x350":{"content":348,"definition":346,"references":475},"x355":{"content":357,"references":481},"x362":{"references":484},"x367":{"content":369,"references":490},"x371":{"content":330,"definition":328,"references":472},"x373":{"content":348,"definition":346,"references":475},"x375":{"content":321,"definition":319,"references":468},"x377":{"content":293,"definition":295,"references":459},"x379":{"content":308,"definition":310,"references":462},"x381":{"content":260,"definition":258,"references":445},"x383":{"content":369,"definition":367,"references":490},"x388":{"references":494}},"data":{"13":"debug/flags.ts.html#1","89":"debug/flags.ts.html#7","191":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">isEnabled</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">flag: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">boolean</span>\n<span class=\"hljs-keyword\">import</span> isEnabled\n</code></pre>\n","198":"debug/bench.ts.html#3","200":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Bench</span> = {\n    <span class=\"hljs-attr\">end</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n}\n</code></pre>\n","207":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">end</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>\n</code></pre>\n","222":"debug/bench.ts.html#7","224":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">emptyBench</span>: <span class=\"hljs-title class_\">Bench</span>\n</code></pre>\n","233":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">end</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>\n</code></pre>\n","253":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">start</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">text: <span class=\"hljs-built_in\">string</span>, force?: <span class=\"hljs-built_in\">boolean</span></span>) =&gt;</span> <span class=\"hljs-title class_\">Bench</span>\n</code></pre>\n","258":"debug/bench.ts.html#9","260":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">text</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","265":"debug/bench.ts.html#9","267":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">force</span>: <span class=\"hljs-built_in\">boolean</span>\n</code></pre>\n","293":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">namespace</span> console\nvar console: Console\n</code></pre>\n<hr>\n<p>The <code>console</code> module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.</p>\n<p>The module exports two specific components:</p>\n<ul>\n<li>A <code>Console</code> class with methods such as <code>console.log()</code>, <code>console.error()</code> and<code>console.warn()</code> that can be used to write to any Node.js stream.</li>\n<li>A global <code>console</code> instance configured to write to <code>process.stdout</code> and <code>process.stderr</code>. The global <code>console</code> can be used without calling<code>require('console')</code>.</li>\n</ul>\n<p><em><strong>Warning</strong></em>: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the <code>note on process I/O</code> for\nmore information.</p>\n<p>Example using the global <code>console</code>:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);\n<span class=\"hljs-comment\">// Prints: hello world, to stdout</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello %s&#x27;</span>, <span class=\"hljs-string\">&#x27;world&#x27;</span>);\n<span class=\"hljs-comment\">// Prints: hello world, to stdout</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Whoops, something bad happened&#x27;</span>));\n<span class=\"hljs-comment\">// Prints error message and stack trace to stderr:</span>\n<span class=\"hljs-comment\">//   Error: Whoops, something bad happened</span>\n<span class=\"hljs-comment\">//     at [eval]:5:15</span>\n<span class=\"hljs-comment\">//     at Script.runInThisContext (node:vm:132:18)</span>\n<span class=\"hljs-comment\">//     at Object.runInThisContext (node:vm:309:38)</span>\n<span class=\"hljs-comment\">//     at node:internal/process/execution:77:19</span>\n<span class=\"hljs-comment\">//     at [eval]-wrapper:6:22</span>\n<span class=\"hljs-comment\">//     at evalScript (node:internal/process/execution:76:60)</span>\n<span class=\"hljs-comment\">//     at node:internal/main/eval_string:23:3</span>\n\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;Will Robinson&#x27;</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">`Danger <span class=\"hljs-subst\">${name}</span>! Danger!`</span>);\n<span class=\"hljs-comment\">// Prints: Danger Will Robinson! Danger!, to stderr</span>\n</code></pre>\n<p>Example using the <code>Console</code> class:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> out = <span class=\"hljs-title function_\">getStreamSomehow</span>();\n<span class=\"hljs-keyword\">const</span> err = <span class=\"hljs-title function_\">getStreamSomehow</span>();\n<span class=\"hljs-keyword\">const</span> myConsole = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title class_\">Console</span>(out, err);\n\nmyConsole.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);\n<span class=\"hljs-comment\">// Prints: hello world, to out</span>\nmyConsole.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello %s&#x27;</span>, <span class=\"hljs-string\">&#x27;world&#x27;</span>);\n<span class=\"hljs-comment\">// Prints: hello world, to out</span>\nmyConsole.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Whoops, something bad happened&#x27;</span>));\n<span class=\"hljs-comment\">// Prints: [Error: Whoops, something bad happened], to err</span>\n\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;Will Robinson&#x27;</span>;\nmyConsole.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">`Danger <span class=\"hljs-subst\">${name}</span>! Danger!`</span>);\n<span class=\"hljs-comment\">// Prints: Danger Will Robinson! Danger!, to err</span>\n</code></pre>\n","295":"node_modules/@types/node/globals.d.ts.html#28","308":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Console</span>.<span class=\"hljs-title function_\">log</span>(...<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>[]): <span class=\"hljs-built_in\">void</span> (+<span class=\"hljs-number\">1</span> overload)\n</code></pre>\n","310":"node_modules/@types/node/console.d.ts.html#221","319":"debug/bench.ts.html#12","321":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">s</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n","328":"node_modules/typescript-lsif/lib/lib.es5.d.ts.html#729","330":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">interface</span> Date\n</code></pre>\n<hr>\n<p>Enables basic storage and retrieval of dates and times.</p>\n","346":"node_modules/typescript-lsif/lib/lib.es5.d.ts.html#743","348":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">valueOf</span>(): <span class=\"hljs-built_in\">number</span>\n</code></pre>\n<hr>\n<p>Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.</p>\n","357":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">end</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>\n</code></pre>\n","367":"debug/bench.ts.html#15","369":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">diff</span>: <span class=\"hljs-built_in\">number</span>\n</code></pre>\n"}}