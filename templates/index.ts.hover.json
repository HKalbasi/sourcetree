{"hovers":{"x5287":{"content":5289,"references":5421},"x5291":{"definition":5274,"references":5421},"x5297":{"content":5299,"definition":1397,"references":1435},"x5301":{"definition":1323,"references":1408},"x5307":{"content":5309,"definition":1454,"references":3760},"x5311":{"content":590,"definition":588,"references":1072},"x5317":{"content":5319,"definition":1331,"references":1411},"x5321":{"content":536,"definition":534,"references":1063},"x5326":{"content":5328,"references":5433},"x5333":{"content":5335,"references":5440},"x5340":{"references":5444},"x5342":{"content":5289,"definition":5287,"references":5421},"x5362":{"content":5352,"definition":5350,"references":5447},"x5364":{"content":5309,"definition":1454,"references":3760},"x5366":{"content":5319,"definition":1331,"references":1411},"x5368":{"content":5299,"definition":1397,"references":1435},"x5370":{"content":5335,"definition":5333,"references":5440},"x5372":{"content":3093,"definition":3091,"references":10082},"x5380":{"content":5382,"references":5454},"x5387":{"references":5457},"x5392":{"content":5394,"references":5463},"x5396":{"content":5328,"definition":5326,"references":5433},"x5401":{"content":5403,"references":5469},"x5405":{"content":5328,"definition":5326,"references":5433},"x5410":{"references":5472}},"data":{"534":"node_modules/@types/node/path.d.ts.html#18","536":"<pre><code class=\"language-typescript\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">&quot;path&quot;</span>\n</code></pre>\n<hr>\n<p>The <code>path</code> module provides utilities for working with file and directory paths.\nIt can be accessed using:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\n</code></pre>\n","588":"node_modules/@types/node/fs/promises.d.ts.html#11","590":"<pre><code class=\"language-typescript\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">&quot;fs/promises&quot;</span>\n</code></pre>\n<hr>\n<p>The <code>fs/promises</code> API provides asynchronous file system methods that return\npromises.</p>\n<p>The promise APIs use the underlying Node.js threadpool to perform file\nsystem operations off the event loop thread. These operations are not\nsynchronized or threadsafe. Care must be taken when performing multiple\nconcurrent modifications on the same file or data corruption may occur.</p>\n","1323":"paths.ts.html#1","1331":"node_modules/@types/node/path.d.ts.html#81","1397":"paths.ts.html#4","1454":"node_modules/@types/node/fs/promises.d.ts.html#854","3091":"node_modules/@types/node/buffer.d.ts.html#602","3093":"<pre><code class=\"language-typescript\">(method) <span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">toString</span>(encoding?: <span class=\"hljs-title class_\">BufferEncoding</span> | <span class=\"hljs-literal\">undefined</span>, start?: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">undefined</span>, end?: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">undefined</span>): <span class=\"hljs-built_in\">string</span>\n</code></pre>\n<hr>\n<p>Decodes <code>buf</code> to a string according to the specified character encoding in<code>encoding</code>. <code>start</code> and <code>end</code> may be passed to decode only a subset of <code>buf</code>.</p>\n<p>If <code>encoding</code> is <code>'utf8'</code> and a byte sequence in the input is not valid UTF-8,\nthen each invalid byte is replaced with the replacement character <code>U+FFFD</code>.</p>\n<p>The maximum length of a string instance (in UTF-16 code units) is available\nas {@link constants.MAX_STRING_LENGTH}.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Buffer</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;buffer&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> buf1 = <span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">allocUnsafe</span>(<span class=\"hljs-number\">26</span>);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">26</span>; i++) {\n  <span class=\"hljs-comment\">// 97 is the decimal ASCII value for &#x27;a&#x27;.</span>\n  buf1[i] = i + <span class=\"hljs-number\">97</span>;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf1.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;utf8&#x27;</span>));\n<span class=\"hljs-comment\">// Prints: abcdefghijklmnopqrstuvwxyz</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf1.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;utf8&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>));\n<span class=\"hljs-comment\">// Prints: abcde</span>\n\n<span class=\"hljs-keyword\">const</span> buf2 = <span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">&#x27;tést&#x27;</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf2.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;hex&#x27;</span>));\n<span class=\"hljs-comment\">// Prints: 74c3a97374</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf2.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&#x27;utf8&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>));\n<span class=\"hljs-comment\">// Prints: té</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buf2.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>));\n<span class=\"hljs-comment\">// Prints: té</span>\n</code></pre>\n","5274":"node_modules/@types/ejs/index.d.ts.html#1","5287":"templates/index.ts.html#1","5289":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> ejs\n</code></pre>\n","5299":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">templateFolder</span>: <span class=\"hljs-built_in\">string</span>\n<span class=\"hljs-keyword\">import</span> templateFolder\n</code></pre>\n","5309":"<pre><code class=\"language-typescript\">(alias) <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-params\">path: PathLike | FileHandle, options?: ({\n    encoding?: <span class=\"hljs-literal\">null</span> | <span class=\"hljs-literal\">undefined</span>;\n    flag?: OpenMode | <span class=\"hljs-literal\">undefined</span>;\n} &amp; Abortable) | <span class=\"hljs-literal\">null</span> | <span class=\"hljs-literal\">undefined</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Buffer</span>&gt; (+<span class=\"hljs-number\">2</span> overloads)\n<span class=\"hljs-keyword\">import</span> readFile\n</code></pre>\n<hr>\n<p>Asynchronously reads the entire contents of a file.</p>\n<p>If no encoding is specified (using <code>options.encoding</code>), the data is returned\nas a <code>Buffer</code> object. Otherwise, the data will be a string.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>When the <code>path</code> is a directory, the behavior of <code>fsPromises.readFile()</code> is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory's contents will be\nreturned.</p>\n<p>It is possible to abort an ongoing <code>readFile</code> using an <code>AbortSignal</code>. If a\nrequest is aborted the promise returned is rejected with an <code>AbortError</code>:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> { readFile } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs/promises&#x27;</span>;\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">const</span> controller = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();\n  <span class=\"hljs-keyword\">const</span> { signal } = controller;\n  <span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-title function_\">readFile</span>(fileName, { signal });\n\n  <span class=\"hljs-comment\">// Abort the request before the promise settles.</span>\n  controller.<span class=\"hljs-title function_\">abort</span>();\n\n  <span class=\"hljs-keyword\">await</span> promise;\n} <span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-comment\">// When a request is aborted - err is an AbortError</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n}\n</code></pre>\n<p>Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering <code>fs.readFile</code> performs.</p>\n<p>Any specified <code>FileHandle</code> has to support reading.</p>\n","5319":"<pre><code class=\"language-typescript\">(alias) (method) <span class=\"hljs-title function_\">join</span>(...<span class=\"hljs-attr\">paths</span>: <span class=\"hljs-built_in\">string</span>[]): <span class=\"hljs-built_in\">string</span>\n<span class=\"hljs-keyword\">import</span> join\n</code></pre>\n<hr>\n<p>Join all arguments together and normalize the resulting path.\nArguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.</p>\n","5326":"templates/index.ts.html#6","5328":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">c</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;ejs.<span class=\"hljs-property\">TemplateFunction</span>&gt;\n</code></pre>\n","5333":"templates/index.ts.html#6","5335":"<pre><code class=\"language-typescript\">(parameter) <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>\n</code></pre>\n","5350":"node_modules/@types/ejs/index.d.ts.html#34","5352":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compile</span>(<span class=\"hljs-params\">template: <span class=\"hljs-built_in\">string</span>, opts: Options &amp; {\n    <span class=\"hljs-keyword\">async</span>: <span class=\"hljs-literal\">true</span>;\n    client?: <span class=\"hljs-literal\">false</span> | <span class=\"hljs-literal\">undefined</span>;\n}</span>): <span class=\"hljs-title class_\">AsyncTemplateFunction</span> (+<span class=\"hljs-number\">4</span> overloads)\n</code></pre>\n<hr>\n<p>Compile the given <code>str</code> of ejs into a template function.</p>\n","5382":"<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">templatesBuilder</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;{\n    <span class=\"hljs-attr\">source</span>: ejs.<span class=\"hljs-property\">TemplateFunction</span>;\n    <span class=\"hljs-attr\">welcome</span>: ejs.<span class=\"hljs-property\">TemplateFunction</span>;\n}&gt;\n</code></pre>\n","5394":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">source</span>: ejs.<span class=\"hljs-property\">TemplateFunction</span>\n</code></pre>\n","5403":"<pre><code class=\"language-typescript\">(property) <span class=\"hljs-attr\">welcome</span>: ejs.<span class=\"hljs-property\">TemplateFunction</span>\n</code></pre>\n"}}